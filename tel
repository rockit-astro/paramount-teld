#!/usr/bin/env python3.4
#
# This file is part of teld.
#
# teld is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# teld is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with teld.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for managing the telescope"""

# pylint: disable=invalid-name
# pylint: disable=too-many-locals

import math
import os
import sys
import time
import Pyro4
from warwick.observatory.common import daemons
from warwick.rasa.telescope import CommandStatus, TelescopeState

# This timeout is used for an initial ping before running the real command
# The real commands may take much longer than this, so we can't apply the timeout there.
TEL_PING_TIMEOUT = 5

SCRIPT_NAME = os.path.basename(sys.argv[0])

# Positions in degrees (alt, az)
PARK_POSITIONS = {
    'stow': (math.radians(35), math.radians(16),
             'general purpose park protecting the mirror and instrument'),
    'zenith': (math.pi / 2, 0, 'park at zenith for maintenance tasks'),
}

FMT_GREEN = '\033[92m'
FMT_RED = '\033[91m'
FMT_BOLD = '\033[1m'
FMT_CLEAR = '\033[0m'

TELESCOPE_STATE_FORMATS = {
    0: FMT_RED,
    1: FMT_RED,
    2: '',
    3: FMT_GREEN,
    4: FMT_GREEN
}

sys.excepthook = Pyro4.util.excepthook

def run_command(command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command()
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
        ret = stop()

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret != -1 and ret != 0:
        print(CommandStatus.message(ret))
    sys.exit(ret)

def sexagesimal(angle):
    """Formats a decimal number in sexagesimal format"""
    negative = angle < 0
    angle = math.fabs(angle)

    degrees = int(angle)
    angle = (angle - degrees) * 60
    minutes = int(angle)
    seconds = (angle - minutes) * 60

    if negative:
        degrees *= -1

    return '{:d}:{:02d}:{:05.2f}'.format(degrees, minutes, seconds)

def parse_sexagesimal(string):
    """Converts a sexagesimal string to decimal"""
    parts = string.split(':')
    if len(parts) != 3:
        raise ValueError('Invalid input')

    a = float(parts[0])
    b = math.copysign(float(parts[1]), a)
    c = math.copysign(float(parts[2]), a)

    return a + b / 60 + c / 3600

def parse_ra(ra_string):
    """Converts a HH:MM:SS Dec string to radians"""
    return parse_sexagesimal(ra_string) * math.pi / 12

def parse_dec(dec_string):
    """Converts a DD:MM:SS Dec string to radians"""
    return parse_sexagesimal(dec_string) * math.pi / 180

def park(args):
    """Slews the telescope to a named park position"""
    if len(args) == 1:
        if args[0] not in PARK_POSITIONS:
            print('error: unknown park position \'' + args[0] + '\'')
            return -1

        alt_radians, az_radians, _ = PARK_POSITIONS.get(args[0])
        ping_teld()
        with daemons.rasa_telescope.connect(timeout=0) as teld:
            return teld.slew_altaz(alt_radians, az_radians)

    print('usage: {} park <position>'.format(SCRIPT_NAME))
    print()
    for p in PARK_POSITIONS:
        print('   {:6s}    {}'.format(p, PARK_POSITIONS[p][2]))
    print()
    return -1

def horizon(args):
    """Slews the telescope to a specified Alt,Az position"""
    if len(args) != 2:
        print('usage: {} horizon <DD:MM:SS.S> <DD:MM:SS.S>'.format(SCRIPT_NAME))
        return -1

    try:
        alt_radians = parse_dec(args[0])
    except ValueError:
        print('error: failed to parse \'' + args[0] + '\' as a DD:MM:SS.S altitude.')
        return -1

    try:
        az_radians = parse_dec(args[1])
    except ValueError:
        print('error: failed to parse \'' + args[1] + '\' as a DD:MM:SS.S azimuth.')
        return -1

    ping_teld()
    with daemons.rasa_telescope.connect(timeout=0) as teld:
        return teld.slew_altaz(alt_radians, az_radians)

def slew(args):
    """Slews the telescope to a specified RA,Dec position"""
    if len(args) != 2:
        print('usage: {} slew <HH:MM:SS.S> <DD:MM:SS.S>'.format(SCRIPT_NAME))
        return -1

    try:
        ra_radians = parse_ra(args[0])
    except ValueError:
        print('error: failed to parse \'' + args[0] + '\' as a HH:MM:SS.S right ascension.')
        return -1

    try:
        dec_radians = parse_dec(args[1])
    except ValueError:
        print('error: failed to parse \'' + args[1] + '\' as a DD:MM:SS.S declination.')
        return -1

    ping_teld()
    with daemons.rasa_telescope.connect(timeout=0) as teld:
        return teld.slew_radec(ra_radians, dec_radians)

def track(args):
    """Slews the telescope to a specified RA,Dec position and begins tracking"""
    if len(args) != 2:
        print('usage: {} track <HH:MM:SS.S> <DD:MM:SS.S>'.format(SCRIPT_NAME))
        return -1

    try:
        ra_radians = parse_ra(args[0])
    except ValueError:
        print('error: failed to parse \'' + args[0] + '\' as a HH:MM:SS.S right ascension.')
        return -1

    try:
        dec_radians = parse_dec(args[1])
    except ValueError:
        print('error: failed to parse \'' + args[1] + '\' as a DD:MM:SS.S declination.')
        return -1

    ping_teld()
    with daemons.rasa_telescope.connect(timeout=0) as teld:
        return teld.track_radec(ra_radians, dec_radians)

def offset(args):
    """Offsets the telescope by a specified delta RA,Dec"""
    if len(args) != 2:
        print('usage: {} offset <HH:MM:SS.S> <DD:MM:SS.S>'.format(SCRIPT_NAME))
        return -1

    try:
        offset_ra_radians = parse_ra(args[0])
    except ValueError:
        print('error: failed to parse \'' + args[0] + '\' as a HH:MM:SS.S right ascension.')
        return -1

    try:
        offset_dec_radians = parse_dec(args[1])
    except ValueError:
        print('error: failed to parse \'' + args[1] + '\' as a DD:MM:SS.S declination.')
        return -1

    ping_teld()
    with daemons.rasa_telescope.connect(timeout=0) as teld:
        return teld.offset_radec(offset_ra_radians, offset_dec_radians)

def status():
    """Reports the current telescope status"""
    ping_teld()
    with daemons.rasa_telescope.connect(timeout=0) as teld:
        data = teld.report_status()

    state_desc = TelescopeState.Names[data['state']]

    # Telescope is disabled
    if data['state'] < TelescopeState.Slewing:
        print('   Telescope is {}'.format(state_desc))
        return 0

    ra_desc = sexagesimal(data['ra'] * 12 / math.pi)
    ha_desc = sexagesimal(data['ha'] * 12 / math.pi)
    dec_desc = sexagesimal(math.degrees(data['dec']))

    alt_desc = sexagesimal(math.degrees(data['alt']))
    az_desc = sexagesimal(math.degrees(data['az']))

    print('   Telescope is {}'.format(state_desc))
    print('   RA is ' + ra_desc)
    print('   Dec is ' + dec_desc)
    print('   HA is ' + ha_desc)
    print('   Altitude is ' + alt_desc)
    print('   Azimuth is ' + az_desc)

    return 0

def stop():
    """Stops any active telescope movement"""
    ping_teld()
    with daemons.rasa_telescope.connect(timeout=0) as teld:
        return teld.stop()

def initialize():
    """Enables the power and talon daemons"""
    ping_teld()
    with daemons.rasa_telescope.connect(timeout=0) as teld:
        return teld.initialize()

def shutdown():
    """Disables the talon daemons and power"""
    ping_teld()
    with daemons.rasa_telescope.connect(timeout=0) as teld:
        return teld.shutdown()

def reboot():
    """Reboots the talon daemons and power"""
    shutdown()
    time.sleep(5)
    return initialize()

def ping_teld():
    """Check that teld is alive"""
    with daemons.rasa_telescope.connect(timeout=TEL_PING_TIMEOUT) as teld:
        teld.ping()

def print_usage():
    """Prints the utility help"""
    print('usage: {} <command> [<args>]'.format(SCRIPT_NAME))
    print()
    print('general commands:')
    print('   status    print a human-readable summary of the telescope status')
    print('   park      park the telescope in a named position')
    print()
    print('observing commands:')
    print('   slew      slew the telescope to a given RA, Dec')
    print('   horizon   slew the telescope to a given Alt, Az')
    print('   track     slew the telescope to a given RA, Dec and track the target')
    print('   offset    offset the telescope by a given RA, Dec')
    print('   stop      immediately stop any telescope movement')
    print()
    print('engineering commands:')
    print('   init      power on the telescope and start low-level hardware daemons')
    print('   kill      kill low-level hardware daemons and power off the telescope')
    print('   reboot    kill and reinitialize the telescope and low-level daemons')
    print()

    return 0

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage())
    if sys.argv[1] == 'park':
        run_command(lambda: park(sys.argv[2:]))
    elif sys.argv[1] == 'slew':
        run_command(lambda: slew(sys.argv[2:]))
    elif sys.argv[1] == 'horizon':
        run_command(lambda: horizon(sys.argv[2:]))
    elif sys.argv[1] == 'track':
        run_command(lambda: track(sys.argv[2:]))
    elif sys.argv[1] == 'offset':
        run_command(lambda: offset(sys.argv[2:]))
    elif sys.argv[1] == 'status':
        run_command(status)
    elif sys.argv[1] == 'stop':
        run_command(stop)
    elif sys.argv[1] == 'init':
        run_command(initialize)
    elif sys.argv[1] == 'kill':
        run_command(shutdown)
    elif sys.argv[1] == 'reboot':
        run_command(reboot)

    # Command not found
    sys.exit(print_usage())
